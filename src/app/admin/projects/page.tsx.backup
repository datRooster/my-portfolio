'use client';

import { useState, useEffect } from 'react';
import Image from 'next/image';
import { Edit, Trash2 } from 'lucide-react';

interface Project {
  id: string;
  title: string;
  slug: string;
  description: string;
  shortDescription?: string;  // Campo aggiunto per compatibilit√†
  longDescription?: string;
  category: string;
  categories:      {/* Projects List */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {filteredProjects.map((project) => (
          <div key={project.id} className="bg-gray-800/80 backdrop-blur-sm rounded-xl border border-gray-700/50 overflow-hidden shadow-lg hover:shadow-xl transition-all duration-300 hover:border-gray-600">ing[];  // Campo aggiunto per l'array di categorie
  demoUrl?: string;
  repositoryUrl?: string;
  githubUrl?: string;  // Campo mappato da repositoryUrl
  liveUrl?: string;    // Campo mappato da demoUrl
  caseStudyUrl?: string;
  featuredImage?: string;
  imageUrl?: string;   // Campo mappato da featuredImage
  featured: boolean;
  status: 'draft' | 'active' | 'completed' | 'archived';
  priority: number;
  startDate: string;
  endDate?: string;
  createdAt: string;
  updatedAt: string;
  technologies: string[];
  skills: string[];
  tags: string[];
  role?: string;
  client?: string;
  team?: string[];
  metrics?: Record<string, any>;
  gallery?: string[];
  screenshots?: string[];
}

interface NewProject {
  title: string;
  description: string;
  shortDescription: string;  // Campo aggiunto
  longDescription: string;
  category: string;
  categories: string[];      // Campo aggiunto per array categorie
  demoUrl: string;
  repositoryUrl: string;
  githubUrl: string;         // Campo mappato
  liveUrl: string;           // Campo mappato
  caseStudyUrl: string;
  featuredImage: string;
  imageUrl: string;          // Campo mappato
  featured: boolean;
  status: 'draft' | 'active' | 'completed' | 'archived';
  priority: number;
  technologies: string[];
  skills: string[];
  tags: string[];
  role: string;
  client: string;
}

const statusColors = {
  draft: 'bg-gray-500',
  active: 'bg-yellow-500',
  completed: 'bg-green-500',
  archived: 'bg-red-500'
};

const statusLabels = {
  draft: 'Bozza',
  active: 'Attivo',
  completed: 'Completato',
  archived: 'Archiviato'
};

export default function ProjectsManagement() {
  const [projects, setProjects] = useState<Project[]>([]);
  const [filteredProjects, setFilteredProjects] = useState<Project[]>([]);
  const [loading, setLoading] = useState(true);
  const [showModal, setShowModal] = useState(false);
  const [editingProject, setEditingProject] = useState<Project | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState<string>('all');

  const [newProject, setNewProject] = useState<NewProject>({
    title: '',
    description: '',
    shortDescription: '',
    longDescription: '',
    category: '',
    categories: [],
    demoUrl: '',
    repositoryUrl: '',
    githubUrl: '',
    liveUrl: '',
    caseStudyUrl: '',
    featuredImage: '',
    imageUrl: '',
    featured: false,
    status: 'draft',
    priority: 1,
    technologies: [],
    skills: [],
    tags: [],
    role: '',
    client: ''
  });

  useEffect(() => {
    loadProjects();
  }, []);

  useEffect(() => {
    filterProjects();
  }, [projects, searchTerm, statusFilter]);

  const loadProjects = async () => {
    try {
      const response = await fetch('/api/projects');
      if (response.ok) {
        const data = await response.json();
        // L'API restituisce {projects: [...], total, page, pageSize}
        setProjects(data.projects || []);
      } else {
        console.error('Failed to load projects');
      }
    } catch (error) {
      console.error('Error loading projects:', error);
    } finally {
      setLoading(false);
    }
  };

  const filterProjects = () => {
    let filtered = projects;

    if (searchTerm) {
      filtered = filtered.filter(project =>
        project.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        project.description.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    if (statusFilter !== 'all') {
      filtered = filtered.filter(project => project.status === statusFilter);
    }

    setFilteredProjects(filtered);
  };

  const handleCreateProject = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      const response = await fetch('/api/projects', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(newProject),
      });

      if (response.ok) {
        await loadProjects();
        setShowModal(false);
        resetForm();
      } else {
        console.error('Failed to create project');
      }
    } catch (error) {
      console.error('Error creating project:', error);
    }
  };

  const handleUpdateProject = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!editingProject) return;

    try {
      const response = await fetch(`/api/projects/${editingProject.slug}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(newProject),
      });

      if (response.ok) {
        await loadProjects();
        setShowModal(false);
        setEditingProject(null);
        resetForm();
      } else {
        console.error('Failed to update project');
      }
    } catch (error) {
      console.error('Error updating project:', error);
    }
  };

  const handleDeleteProject = async (projectId: string) => {
    if (!confirm('Sei sicuro di voler eliminare questo progetto?')) return;

    try {
      const project = projects.find(p => p.id === projectId);
      if (!project) return;

      const response = await fetch(`/api/projects/${project.slug}`, {
        method: 'DELETE',
      });

      if (response.ok) {
        await loadProjects();
      } else {
        console.error('Failed to delete project');
      }
    } catch (error) {
      console.error('Error deleting project:', error);
    }
  };

  const openEditModal = (project: Project) => {
    setEditingProject(project);
    setNewProject({
      title: project.title,
      description: project.description,
      shortDescription: project.shortDescription || '',
      longDescription: project.longDescription || '',
      category: project.category || '',
      categories: project.categories || [],
      demoUrl: project.demoUrl || '',
      repositoryUrl: project.repositoryUrl || '',
      githubUrl: project.githubUrl || '',
      liveUrl: project.liveUrl || '',
      caseStudyUrl: project.caseStudyUrl || '',
      featuredImage: project.featuredImage || '',
      imageUrl: project.imageUrl || '',
      featured: project.featured,
      status: project.status,
      priority: project.priority,
      technologies: project.technologies || [],
      skills: project.skills || [],
      tags: project.tags || [],
      role: project.role || '',
      client: project.client || ''
    });
    setShowModal(true);
  };

  const resetForm = () => {
    setNewProject({
      title: '',
      description: '',
      shortDescription: '',
      longDescription: '',
      category: '',
      categories: [],
      demoUrl: '',
      repositoryUrl: '',
      githubUrl: '',
      liveUrl: '',
      caseStudyUrl: '',
      featuredImage: '',
      imageUrl: '',
      featured: false,
      status: 'draft',
      priority: 1,
      technologies: [],
      skills: [],
      tags: [],
      role: '',
      client: ''
    });
  };

  const addTag = (type: 'categories' | 'technologies' | 'skills' | 'tags', tag: string) => {
    if (tag.trim() && !newProject[type].includes(tag.trim())) {
      setNewProject(prev => ({
        ...prev,
        [type]: [...prev[type], tag.trim()]
      }));
    }
  };

  const removeTag = (type: 'categories' | 'technologies' | 'skills' | 'tags', index: number) => {
    setNewProject(prev => ({  
      ...prev,
      [type]: prev[type].filter((_: string, i: number) => i !== index)
    }));
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="w-8 h-8 border-4 border-yellow-500 border-t-transparent rounded-full animate-spin"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-950 text-white space-y-8 p-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold text-white mb-2">Gestione Progetti</h1>
          <p className="text-gray-300">Gestisci i tuoi progetti del portfolio</p>
        </div>
        <button
          onClick={() => setShowModal(true)}
          className="bg-yellow-500 hover:bg-yellow-400 text-gray-900 px-6 py-3 rounded-lg font-medium transition-all duration-200 shadow-lg hover:shadow-xl flex items-center gap-2"
        >
          <span className="text-lg">‚ú®</span>
          Nuovo Progetto
        </button>
      </div>

      {/* Filters */}
      <div className="bg-gray-800/50 backdrop-blur-sm rounded-xl p-6 border border-gray-700/50 shadow-lg">
        <div className="flex flex-col md:flex-row gap-4">
          <div className="flex-1">
            <div className="relative">
              <input
                type="text"
                placeholder="üîç Cerca progetti..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full bg-gray-900/80 border border-gray-600 rounded-xl px-4 py-3 text-white placeholder-gray-400 focus:outline-none focus:border-yellow-500 focus:ring-2 focus:ring-yellow-500/20 transition-all duration-200"
              />
            </div>
          </div>
          <div className="relative">
            <select
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value)}
              className="appearance-none bg-gray-900/80 border border-gray-600 rounded-xl px-4 py-3 pr-10 text-white focus:outline-none focus:border-yellow-500 focus:ring-2 focus:ring-yellow-500/20 transition-all duration-200 cursor-pointer min-w-[180px]"
            >
              <option value="all" className="bg-gray-800 text-white">üìä Tutti gli stati</option>
              <option value="draft" className="bg-gray-800 text-white">üìù Bozza</option>
              <option value="active" className="bg-gray-800 text-white">üöÄ Attivo</option>
              <option value="completed" className="bg-gray-800 text-white">‚úÖ Completato</option>
              <option value="archived" className="bg-gray-800 text-white">üì¶ Archiviato</option>
            </select>
            <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
              <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
              </svg>
            </div>
          </div>
        </div>
      </div>

      {/* Projects List */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {filteredProjects.map((project) => (
          <div key={project.id} className="bg-gray-800 rounded-xl border border-gray-700 overflow-hidden">
            {project.imageUrl && (
              <div className="relative h-48">
                <Image
                  src={project.imageUrl}
                  alt={project.title}
                  fill
                  className="object-cover"
                />
                {project.featured && (
                  <div className="absolute top-4 left-4">
                    <span className="bg-yellow-500 text-black px-2 py-1 rounded-full text-xs font-medium">
                      ‚≠ê In evidenza
                    </span>
                  </div>
                )}
                <div className="absolute top-4 right-4">
                  <span className={`${statusColors[project.status]} text-white px-2 py-1 rounded-full text-xs font-medium`}>
                    {statusLabels[project.status]}
                  </span>
                </div>
              </div>
            )}
            
            <div className="p-6">
              <div className="flex justify-between items-start mb-4">
                <div>
                  <h3 className="text-xl font-bold text-white mb-2">{project.title}</h3>
                  <p className="text-gray-400 text-sm line-clamp-2">{project.shortDescription || project.description}</p>
                </div>
                <div className="text-right text-sm text-gray-400">
                  <p>Priorit√†: {project.priority}</p>
                </div>
              </div>

              {/* Tags */}
              <div className="space-y-3 mb-4">
                {project.categories && project.categories.length > 0 && (
                  <div>
                    <p className="text-xs text-gray-400 mb-1 font-medium">Categorie:</p>
                    <div className="flex flex-wrap gap-2">
                      {project.categories.map((category: string, index: number) => (
                        <span key={index} className="bg-blue-600/80 text-blue-100 px-3 py-1 rounded-full text-xs font-medium border border-blue-500/30">
                          {category}
                        </span>
                      ))}
                    </div>
                  </div>
                )}
                {project.technologies && project.technologies.length > 0 && (
                  <div>
                    <p className="text-xs text-gray-400 mb-1 font-medium">Tecnologie:</p>
                    <div className="flex flex-wrap gap-2">
                      {project.technologies.map((tech: string, index: number) => (
                        <span key={index} className="bg-emerald-600/80 text-emerald-100 px-3 py-1 rounded-full text-xs font-medium border border-emerald-500/30">
                          {tech}
                        </span>
                      ))}
                    </div>
                  </div>
                )}
              </div>

              {/* Links */}
              <div className="flex gap-2 mb-4">
                {project.githubUrl && (
                  <a
                    href={project.githubUrl}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-gray-400 hover:text-white text-sm"
                  >
                    üîó GitHub
                  </a>
                )}
                {project.liveUrl && (
                  <a
                    href={project.liveUrl}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-gray-400 hover:text-white text-sm"
                  >
                    üåê Live Demo
                  </a>
                )}
              </div>

              {/* Actions */}
              <div className="flex justify-between items-center">
                <div className="text-xs text-gray-400">
                  Aggiornato: {new Date(project.updatedAt).toLocaleDateString('it-IT')}
                </div>
                <div className="flex gap-2">
                  <button
                    onClick={() => openEditModal(project)}
                    className="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded text-sm transition flex items-center space-x-1"
                  >
                    <Edit className="w-4 h-4" />
                    <span>Modifica</span>
                  </button>
                  <button
                    onClick={() => handleDeleteProject(project.id)}
                    className="bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded text-sm transition flex items-center space-x-1"
                  >
                    <Trash2 className="w-4 h-4" />
                    <span>Elimina</span>
                  </button>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>

      {filteredProjects.length === 0 && (
        <div className="text-center py-12">
          <p className="text-gray-400 text-lg">Nessun progetto trovato</p>
        </div>
      )}

      {/* Modal for Create/Edit Project */}
      {showModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-gray-800 rounded-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6 border-b border-gray-700">
              <h2 className="text-2xl font-bold text-white">
                {editingProject ? 'Modifica Progetto' : 'Nuovo Progetto'}
              </h2>
            </div>
            
            <form onSubmit={editingProject ? handleUpdateProject : handleCreateProject} className="p-6 space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-white mb-2">Titolo*</label>
                  <input
                    type="text"
                    required
                    value={newProject.title}
                    onChange={(e) => setNewProject(prev => ({ ...prev, title: e.target.value }))}
                    className="w-full bg-gray-900 border border-gray-600 rounded-lg px-4 py-2 text-white focus:outline-none focus:border-yellow-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-white mb-2">Stato</label>
                  <select
                    value={newProject.status}
                    onChange={(e) => setNewProject(prev => ({ ...prev, status: e.target.value as any }))}
                    className="w-full bg-gray-900 border border-gray-600 rounded-lg px-4 py-2 text-white focus:outline-none focus:border-yellow-500"
                  >
                    <option value="draft">Bozza</option>
                    <option value="active">Attivo</option>
                    <option value="completed">Completato</option>
                    <option value="archived">Archiviato</option>
                  </select>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-white mb-2">Descrizione Breve</label>
                <input
                  type="text"
                  value={newProject.shortDescription}
                  onChange={(e) => setNewProject(prev => ({ ...prev, shortDescription: e.target.value }))}
                  className="w-full bg-gray-900 border border-gray-600 rounded-lg px-4 py-2 text-white focus:outline-none focus:border-yellow-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-white mb-2">Descrizione Completa*</label>
                <textarea
                  required
                  rows={4}
                  value={newProject.description}
                  onChange={(e) => setNewProject(prev => ({ ...prev, description: e.target.value }))}
                  className="w-full bg-gray-900 border border-gray-600 rounded-lg px-4 py-2 text-white focus:outline-none focus:border-yellow-500"
                />
              </div>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div>
                  <label className="block text-sm font-medium text-white mb-2">GitHub URL</label>
                  <input
                    type="url"
                    value={newProject.githubUrl}
                    onChange={(e) => setNewProject(prev => ({ ...prev, githubUrl: e.target.value }))}
                    className="w-full bg-gray-900 border border-gray-600 rounded-lg px-4 py-2 text-white focus:outline-none focus:border-yellow-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-white mb-2">Live URL</label>
                  <input
                    type="url"
                    value={newProject.liveUrl}
                    onChange={(e) => setNewProject(prev => ({ ...prev, liveUrl: e.target.value }))}
                    className="w-full bg-gray-900 border border-gray-600 rounded-lg px-4 py-2 text-white focus:outline-none focus:border-yellow-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-white mb-2">Immagine URL</label>
                  <input
                    type="url"
                    value={newProject.imageUrl}
                    onChange={(e) => setNewProject(prev => ({ ...prev, imageUrl: e.target.value }))}
                    className="w-full bg-gray-900 border border-gray-600 rounded-lg px-4 py-2 text-white focus:outline-none focus:border-yellow-500"
                  />
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-white mb-2">Priorit√†</label>
                  <input
                    type="number"
                    min="1"
                    max="10"
                    value={newProject.priority}
                    onChange={(e) => setNewProject(prev => ({ ...prev, priority: parseInt(e.target.value) }))}
                    className="w-full bg-gray-900 border border-gray-600 rounded-lg px-4 py-2 text-white focus:outline-none focus:border-yellow-500"
                  />
                </div>

                <div className="flex items-center">
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={newProject.featured}
                      onChange={(e) => setNewProject(prev => ({ ...prev, featured: e.target.checked }))}
                      className="sr-only"
                    />
                    <div className={`relative w-6 h-6 rounded border-2 mr-2 ${newProject.featured ? 'bg-yellow-500 border-yellow-500' : 'border-gray-600'}`}>
                      {newProject.featured && (
                        <div className="absolute inset-0 flex items-center justify-center">
                          <span className="text-black text-xs">‚úì</span>
                        </div>
                      )}
                    </div>
                    <span className="text-white">Progetto in evidenza</span>
                  </label>
                </div>
              </div>

              {/* Tags Input */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-white mb-2">Categorie</label>
                  <input
                    type="text"
                    placeholder="Aggiungi categoria e premi Invio"
                    onKeyPress={(e) => {
                      if (e.key === 'Enter') {
                        e.preventDefault();
                        addTag('categories', e.currentTarget.value);
                        e.currentTarget.value = '';
                      }
                    }}
                    className="w-full bg-gray-900 border border-gray-600 rounded-lg px-4 py-2 text-white focus:outline-none focus:border-yellow-500"
                  />
                  <div className="flex flex-wrap gap-2 mt-2">
                    {newProject.categories.map((category: string, index: number) => (
                      <span key={index} className="bg-blue-500 bg-opacity-20 text-blue-400 px-2 py-1 rounded text-sm flex items-center">
                        {category}
                        <button
                          type="button"
                          onClick={() => removeTag('categories', index)}
                          className="ml-2 text-blue-300 hover:text-blue-100"
                        >
                          √ó
                        </button>
                      </span>
                    ))}
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-white mb-2">Tecnologie</label>
                  <input
                    type="text"
                    placeholder="Aggiungi tecnologia e premi Invio"
                    onKeyPress={(e) => {
                      if (e.key === 'Enter') {
                        e.preventDefault();
                        addTag('technologies', e.currentTarget.value);
                        e.currentTarget.value = '';
                      }
                    }}
                    className="w-full bg-gray-900 border border-gray-600 rounded-lg px-4 py-2 text-white focus:outline-none focus:border-yellow-500"
                  />
                  <div className="flex flex-wrap gap-2 mt-2">
                    {newProject.technologies.map((tech: string, index: number) => (
                      <span key={index} className="bg-green-500 bg-opacity-20 text-green-400 px-2 py-1 rounded text-sm flex items-center">
                        {tech}
                        <button
                          type="button"
                          onClick={() => removeTag('technologies', index)}
                          className="ml-2 text-green-300 hover:text-green-100"
                        >
                          √ó
                        </button>
                      </span>
                    ))}
                  </div>
                </div>
              </div>

              <div className="flex justify-end gap-4 pt-6 border-t border-gray-700">
                <button
                  type="button"
                  onClick={() => {
                    setShowModal(false);
                    setEditingProject(null);
                    resetForm();
                  }}
                  className="px-6 py-2 border border-gray-600 text-gray-400 rounded-lg hover:bg-gray-700 transition"
                >
                  Annulla
                </button>
                <button
                  type="submit"
                  className="px-6 py-2 bg-yellow-500 hover:bg-yellow-600 text-black rounded-lg font-medium transition"
                >
                  {editingProject ? 'Aggiorna Progetto' : 'Crea Progetto'}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}