// Portfolio Database Schema
// theWebRooster Portfolio Management System

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// MODELS PRINCIPALI
// ================================

model Project {
  id               String   @id @default(uuid())
  title            String
  description      String
  longDescription  String?
  
  // Metadati
  status           ProjectStatus @default(DRAFT)
  priority         Int          @default(1)
  featured         Boolean      @default(false)
  
  // Date
  startDate        DateTime
  endDate          DateTime?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  
  // Media
  featuredImage    String?
  gallery          String[]     @default([])
  screenshots      String[]     @default([])
  
  // Links
  demoUrl          String?
  repositoryUrl    String?
  caseStudyUrl     String?
  
  // SEO e navigazione
  slug             String       @unique
  tags             String[]     @default([])
  
  // Info progetto
  role             String?
  client           String?
  team             String[]     @default([])
  
  // Metriche
  metrics          Json?        // Flexible metrics storage
  
  // Relazioni
  category         Category     @relation(fields: [categoryId], references: [id])
  categoryId       String
  technologies     ProjectTechnology[]
  skills           ProjectSkill[]
  testimonials     Testimonial[]
  
  @@map("projects")
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  icon        String?   // Emoji o path icona
  color       String?   // Colore hex per UI
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relazioni
  projects    Project[]
  
  @@map("categories")
}

model Technology {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  icon        String?   // Logo o icona
  color       String?   // Colore brand
  website     String?   // Sito ufficiale
  category    String?   // Frontend, Backend, Database, etc.
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relazioni
  projects    ProjectTechnology[]
  
  @@map("technologies")
}

model Skill {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  category    String?   // Technical, Soft, etc.
  level       SkillLevel @default(INTERMEDIATE)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relazioni
  projects    ProjectSkill[]
  
  @@map("skills")
}

// ================================
// TABELLE DI RELAZIONE
// ================================

model ProjectTechnology {
  id           String     @id @default(uuid())
  project      Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId    String
  technology   Technology @relation(fields: [technologyId], references: [id], onDelete: Cascade)
  technologyId String
  importance   Int        @default(1) // 1-5 per ordinamento
  createdAt    DateTime   @default(now())
  
  @@unique([projectId, technologyId])
  @@map("project_technologies")
}

model ProjectSkill {
  id        String   @id @default(uuid())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  skill     Skill    @relation(fields: [skillId], references: [id], onDelete: Cascade)
  skillId   String
  level     SkillLevel @default(INTERMEDIATE)
  createdAt DateTime @default(now())
  
  @@unique([projectId, skillId])
  @@map("project_skills")
}

// ================================
// MODELS PER FUTURE ESTENSIONI
// ================================

model BlogPost {
  id          String      @id @default(uuid())
  title       String
  content     String
  excerpt     String?
  slug        String      @unique
  status      PostStatus  @default(DRAFT)
  featured    Boolean     @default(false)
  publishedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // SEO
  metaTitle       String?
  metaDescription String?
  featuredImage   String?
  
  // Categorizzazione
  tags        String[]  @default([])
  category    String?
  
  @@map("blog_posts")
}

model Service {
  id              String          @id @default(uuid())
  name            String          // Keep existing field
  title           String?         // Alternative display name
  description     String
  longDescription String?
  
  // Service details
  category        ServiceCategory @default(WEB_DEVELOPMENT)
  type            ServiceType     @default(CONSULTING)
  duration        String?         // Existing field
  pricing         ServicePricing  @default(CUSTOM)
  price           Decimal?        // Keep existing field
  basePrice       Float?          // Additional pricing info
  maxPrice        Float?          // For price ranges
  currency        String          @default("EUR")
  
  // Status and visibility
  status          ServiceStatus   @default(ACTIVE)
  featured        Boolean         @default(false)
  available       Boolean         @default(true)
  order           Int             @default(0)
  
  // Content - keep existing
  features        String[]        @default([])
  deliverables    String[]        @default([])
  requirements    String[]        @default([])
  
  // Media
  icon            String?         // Icon for the service
  image           String?         // Featured image
  gallery         String[]        @default([])
  
  // SEO
  slug            String?         @unique
  tags            String[]        @default([])
  
  // Metadata
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  // Relations
  inquiries       ServiceInquiry[]
  testimonials    Testimonial[]
  
  @@map("services")
}

// Modelli gi√† definiti sopra - rimossi duplicati

// ================================
// ENUMS
// ================================

enum ProjectStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// ServiceStatus moved to end of file with services enums

// ================================
// SECURITY & AUTHENTICATION MODELS
// ================================

model User {
  id                String       @id @default(uuid())
  email             String       @unique
  username          String       @unique
  passwordHash      String       // bcrypt + salt + pepper
  passwordSalt      String       // Unique salt per user
  
  // 2FA Configuration
  twoFactorEnabled  Boolean      @default(false)
  twoFactorSecret   String?      // TOTP secret (encrypted)
  backupCodes       String[]     @default([]) // Encrypted backup codes
  
  // Account Security
  role              UserRole     @default(USER)
  status            UserStatus   @default(ACTIVE)
  emailVerified     Boolean      @default(false)
  emailVerifyToken  String?
  
  // Password Security
  passwordResetToken     String?
  passwordResetExpires   DateTime?
  passwordChangedAt      DateTime?
  failedLoginAttempts    Int      @default(0)
  lockoutUntil          DateTime?
  
  // Session Management
  lastLoginAt       DateTime?
  lastLoginIP       String?
  lastLoginLocation String?
  currentSessionId  String?
  
  // Security Metadata
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  createdIP         String?
  
  // Relations
  sessions          UserSession[]
  auditLogs         AuditLog[]
  loginAttempts     LoginAttempt[]
  
  @@map("users")
}

model UserSession {
  id                String       @id @default(uuid())
  userId            String
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Session Data
  sessionToken      String       @unique // JWT ID
  refreshToken      String       @unique // Refresh token
  
  // Security Info
  ipAddress         String
  userAgent         String
  location          String?      // Geo-location
  deviceFingerprint String?      // Device identification
  
  // Session Lifecycle
  createdAt         DateTime     @default(now())
  lastAccessedAt    DateTime     @default(now())
  expiresAt         DateTime
  isActive          Boolean      @default(true)
  revokedAt         DateTime?
  revokedReason     String?
  
  @@map("user_sessions")
}

model LoginAttempt {
  id                String           @id @default(uuid())
  userId            String?          // Null for failed attempts
  user              User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Attempt Details
  email             String
  ipAddress         String
  userAgent         String
  location          String?
  deviceFingerprint String?
  
  // Attempt Result
  success           Boolean
  failureReason     LoginFailureReason?
  twoFactorUsed     Boolean          @default(false)
  
  // Metadata
  createdAt         DateTime         @default(now())
  
  @@map("login_attempts")
}

model AuditLog {
  id          String       @id @default(uuid())
  userId      String?
  user        User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Event Details
  action      String       // CREATE_PROJECT, DELETE_USER, etc.
  resource    String       // projects, users, etc.
  resourceId  String?      // ID of affected resource
  
  // Request Context
  ipAddress   String
  userAgent   String
  method      String       // GET, POST, etc.
  endpoint    String       // /api/admin/projects
  
  // Change Details
  oldValues   Json?        // Previous state
  newValues   Json?        // New state
  
  // Metadata
  createdAt   DateTime     @default(now())
  severity    AuditSeverity @default(INFO)
  
  @@map("audit_logs")
}

model SecurityEvent {
  id              String             @id @default(uuid())
  type            SecurityEventType
  severity        SecuritySeverity
  
  // Event Details
  description     String
  ipAddress       String
  userAgent       String?
  userId          String?
  
  // Threat Intelligence
  isBlocked       Boolean            @default(false)
  riskScore       Int                @default(0) // 0-100
  geoLocation     String?
  
  // Response
  actionTaken     String?
  resolvedAt      DateTime?
  
  // Metadata
  createdAt       DateTime           @default(now())
  metadata        Json?              // Additional context
  
  @@map("security_events")
}

model IPWhitelist {
  id          String       @id @default(uuid())
  ipAddress   String       @unique
  description String?
  isActive    Boolean      @default(true)
  createdBy   String       // User ID
  createdAt   DateTime     @default(now())
  expiresAt   DateTime?    // Optional expiration
  
  @@map("ip_whitelist")
}

model RateLimitBucket {
  id          String       @id @default(uuid())
  identifier  String       // IP or user ID
  bucket      String       // endpoint or global
  tokens      Int          // Current tokens
  lastRefill  DateTime     @default(now())
  
  @@unique([identifier, bucket])
  @@map("rate_limit_buckets")
}

// ================================
// SECURITY ENUMS
// ================================

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  DEACTIVATED
  PENDING_VERIFICATION
}

enum LoginFailureReason {
  INVALID_CREDENTIALS
  ACCOUNT_LOCKED
  ACCOUNT_SUSPENDED
  TWO_FACTOR_REQUIRED
  TWO_FACTOR_INVALID
  IP_BLOCKED
  RATE_LIMITED
}

enum AuditSeverity {
  INFO
  WARNING
  ERROR
  CRITICAL
}

enum SecurityEventType {
  BRUTE_FORCE_ATTEMPT
  SUSPICIOUS_LOGIN
  UNAUTHORIZED_ACCESS
  SQL_INJECTION_ATTEMPT
  XSS_ATTEMPT
  CSRF_ATTACK
  DDoS_ATTEMPT
  PRIVILEGE_ESCALATION
  DATA_EXFILTRATION
}

enum SecuritySeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// ================================
// BUG BOUNTY MODELS
// ================================

model BugBountyStats {
  id               String   @id @default(uuid())
  
  // Statistics
  totalBugs        Int      @default(0)
  criticalBugs     Int      @default(0)
  highBugs         Int      @default(0)
  mediumBugs       Int      @default(0)
  lowBugs          Int      @default(0)
  informationalBugs Int     @default(0)
  
  // Financial
  totalReward      Float    @default(0.0)
  totalBounty      Float    @default(0.0)
  avgRewardPerBug  Float    @default(0.0)
  
  // Recognition
  cveAssigned      Int      @default(0)
  hallOfFame       Int      @default(0)
  publicDisclosures Int     @default(0)
  
  // Timing
  avgResolutionDays Float   @default(0.0)
  fastestResolution Int     @default(0) // in hours
  
  // Meta
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  reports          BugReport[]
  platforms        Platform[]
  achievements     Achievement[]
  
  @@map("bug_bounty_stats")
}

model BugReport {
  id               String   @id @default(uuid())
  
  // Basic Info
  title            String
  description      String   // Public-safe description
  privateNotes     String?  // Internal notes (admin only)
  
  // Classification
  severity         BugSeverity
  category         VulnerabilityCategory
  cweId            String?   // CWE-79, CWE-89, etc.
  cveId            String?   // CVE-2024-12345
  
  // Program Info
  program          String    // Company/Program name
  platform         String    // HackerOne, Bugcrowd, etc.
  programUrl       String?
  
  // Technical Details
  methodology      String[]  @default([]) // ["SQL Injection", "Manual Testing"]
  tools            String[]  @default([]) // ["Burp Suite", "SQLMap"]
  payload          String?   // Safe payload example
  
  // Impact & Business
  impact           String    // Business impact description
  affectedAssets   String[]  @default([]) // ["api.example.com", "admin panel"]
  usersAffected    Int?      // Number of users potentially affected
  
  // Timeline
  discoveredAt     DateTime
  reportedAt       DateTime
  firstResponseAt  DateTime?
  resolvedAt       DateTime?
  disclosedAt      DateTime? // Public disclosure date
  
  // Status & Resolution
  status           BugReportStatus @default(SUBMITTED)
  resolution       String?   // How it was fixed
  reproducible     Boolean   @default(true)
  duplicate        Boolean   @default(false)
  
  // Financial
  reward           Float?    // Bounty amount
  currency         String?   @default("USD")
  bonusReward      Float?    // Additional bonus
  
  // Media & Links
  screenshots      String[]  @default([])
  proofOfConcept   String[]  @default([])
  reportUrl        String?   // Link to platform report
  publicUrl        String?   // Public disclosure URL
  blogPostUrl      String?   // If you wrote about it
  
  // Collaboration
  collaborators    String[]  @default([]) // Other researchers involved
  credits          String?   // Credit line for disclosure
  
  // Meta
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Relations
  statsId          String?
  stats            BugBountyStats? @relation(fields: [statsId], references: [id])
  
  @@map("bug_reports")
}

model Platform {
  id               String   @id @default(uuid())
  
  // Basic Info
  name             String   @unique // "HackerOne", "Bugcrowd", "Synack"
  username         String   // Your username on platform
  profileUrl       String?
  
  // Stats
  reputation       Int      @default(0)
  rank             String?  // "7th", "Top 1%", etc.
  points           Int      @default(0)
  level            String?  // "Legend", "Master", etc.
  
  // Performance
  bugsSubmitted    Int      @default(0)
  bugsAccepted     Int      @default(0)
  bugsDuplicate    Int      @default(0)
  bugsInformational Int     @default(0)
  
  // Financial
  totalEarnings    Float    @default(0.0)
  averageReward    Float    @default(0.0)
  currency         String   @default("USD")
  
  // Recognition
  hallOfFame       Int      @default(0)
  certificates     String[] @default([])
  badges           String[] @default([])
  
  // Activity
  joinedAt         DateTime?
  lastActive       DateTime?
  activeMonths     Int      @default(0)
  
  // Settings
  active           Boolean  @default(true)
  featured         Boolean  @default(false)
  publicProfile    Boolean  @default(true)
  
  // Meta
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  statsId          String?
  stats            BugBountyStats? @relation(fields: [statsId], references: [id])
  
  @@map("platforms")
}

model Achievement {
  id               String   @id @default(uuid())
  
  // Basic Info
  title            String
  description      String
  category         AchievementCategory
  
  // Visual
  icon             String?  // Icon name or URL
  badgeUrl         String?  // Badge image URL
  color            String?  // Hex color for display
  
  // Recognition
  issuedBy         String   // Platform or organization
  certificateUrl   String?  // Certificate PDF/image
  verificationUrl  String?  // Verification link
  
  // Details
  criteria         String?  // What you did to earn it
  difficulty       AchievementDifficulty @default(MEDIUM)
  rarity           String?  // "Rare", "Epic", "Legendary"
  
  // Timing
  earnedAt         DateTime
  expiresAt        DateTime?
  
  // Value
  points           Int?     // Points awarded
  monetaryValue    Float?   // If has monetary value
  
  // Meta
  featured         Boolean  @default(false)
  publicVisible    Boolean  @default(true)
  
  // Meta timestamps
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  statsId          String?
  stats            BugBountyStats? @relation(fields: [statsId], references: [id])
  
  @@map("achievements")
}

model Methodology {
  id               String   @id @default(uuid())
  
  // Basic Info
  name             String   @unique
  description      String
  category         MethodologyCategory
  
  // Technical Details
  steps            String[] @default([]) // Step-by-step process
  tools            String[] @default([]) // Required tools
  prerequisites    String[] @default([]) // Knowledge/setup needed
  
  // Examples
  exampleTargets   String[] @default([]) // Types of targets
  examplePayloads  String[] @default([]) // Safe example payloads
  commonMistakes   String[] @default([]) // What to avoid
  
  // Difficulty & Time
  difficulty       MethodologyDifficulty @default(INTERMEDIATE)
  estimatedTime    String?  // "2-4 hours", "1 day"
  successRate      Float?   // Personal success rate %
  
  // Resources
  resources        String[] @default([]) // Links to guides, papers
  references       String[] @default([]) // CVE references, case studies
  
  // Usage Stats
  timesUsed        Int      @default(0)
  bugsFound        Int      @default(0)
  lastUsed         DateTime?
  
  // Meta
  featured         Boolean  @default(false)
  publicVisible    Boolean  @default(true)
  
  // Meta timestamps
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@map("methodologies")
}

// ================================
// BUG BOUNTY ENUMS
// ================================

enum BugSeverity {
  CRITICAL
  HIGH
  MEDIUM
  LOW
  INFORMATIONAL
}

enum VulnerabilityCategory {
  // Web Application
  SQL_INJECTION
  XSS_REFLECTED
  XSS_STORED
  XSS_DOM
  CSRF
  IDOR
  AUTHENTICATION_BYPASS
  AUTHORIZATION_FLAW
  SESSION_MANAGEMENT
  
  // Infrastructure
  RCE
  LFI
  RFI
  DIRECTORY_TRAVERSAL
  COMMAND_INJECTION
  
  // Logic Flaws
  BUSINESS_LOGIC
  RACE_CONDITION
  PRICE_MANIPULATION
  PRIVILEGE_ESCALATION
  
  // Information Disclosure
  SENSITIVE_DATA_EXPOSURE
  PII_DISCLOSURE
  DEBUGGING_INFO
  
  // API Security
  API_MISCONFIGURATION
  BROKEN_AUTHENTICATION
  EXCESSIVE_DATA_EXPOSURE
  RATE_LIMITING_BYPASS
  
  // Mobile
  MOBILE_APP_VULN
  DEEP_LINK_ABUSE
  
  // Other
  SOCIAL_ENGINEERING
  PHISHING
  PHYSICAL_SECURITY
  CRYPTOGRAPHIC_FAILURE
  MISCONFIGURATION
  OTHER
}

enum BugReportStatus {
  SUBMITTED
  TRIAGING
  ACCEPTED
  RESOLVED
  FIXED
  DUPLICATE
  NOT_APPLICABLE
  INFORMATIONAL
  PENDING_DISCLOSURE
  DISCLOSED
  REJECTED
}

enum AchievementCategory {
  FIRST_BUG
  SEVERITY_MILESTONE
  PLATFORM_MILESTONE  
  FINANCIAL_MILESTONE
  RECOGNITION
  COLLABORATION
  COMMUNITY
  CERTIFICATION
  CVE_ASSIGNMENT
  HALL_OF_FAME
  SPECIAL_EVENT
  ANNIVERSARY
}

enum AchievementDifficulty {
  EASY
  MEDIUM
  HARD
  LEGENDARY
}

enum MethodologyCategory {
  WEB_APPLICATION
  API_TESTING
  MOBILE_APPLICATION
  INFRASTRUCTURE
  SOCIAL_ENGINEERING
  PHYSICAL_SECURITY
  CRYPTOGRAPHY
  REVERSE_ENGINEERING
  BUSINESS_LOGIC
  RECONNAISSANCE
  AUTOMATION
  MANUAL_TESTING
}

enum MethodologyDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

// ================================
// SERVICES & CONSULTING MODELS
// ================================

model ServiceInquiry {
  id              String              @id @default(uuid())
  
  // Contact info
  name            String
  email           String
  company         String?
  phone           String?
  
  // Inquiry details
  subject         String
  message         String
  budget          String?             // "Under 5k", "5k-10k", etc.
  timeline        String?             // "ASAP", "1-3 months", etc.
  projectType     String?             // Free text or category
  
  // Service reference
  service         Service?            @relation(fields: [serviceId], references: [id])
  serviceId       String?
  
  // Status
  status          InquiryStatus       @default(NEW)
  priority        InquiryPriority     @default(MEDIUM)
  
  // Communication
  notes           String?             // Internal notes
  response        String?             // Response to client
  followUpDate    DateTime?
  
  // Metadata
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  respondedAt     DateTime?
  
  // Relations
  responses       InquiryResponse[]
  
  @@map("service_inquiries")
}

model InquiryResponse {
  id          String          @id @default(uuid())
  content     String
  isInternal  Boolean         @default(false) // Internal note vs client response
  author      String?         // Who responded
  
  // Metadata
  createdAt   DateTime        @default(now())
  
  // Relations
  inquiry     ServiceInquiry  @relation(fields: [inquiryId], references: [id])
  inquiryId   String
  
  @@map("inquiry_responses")
}

model Testimonial {
  id          String          @id @default(uuid())
  
  // Client info
  clientName  String
  clientRole  String?         // "CTO", "Founder", etc.
  company     String?
  avatar      String?         // Client photo
  
  // Testimonial content
  content     String
  rating      Int             @default(5) // 1-5 stars
  
  // Project context
  projectType String?         // Type of work done
  
  // Status
  featured    Boolean         @default(false)
  approved    Boolean         @default(false)
  
  // Metadata
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  
  // Relations
  service     Service?        @relation(fields: [serviceId], references: [id])
  serviceId   String?
  project     Project?        @relation(fields: [projectId], references: [id])
  projectId   String?
  
  @@map("testimonials")
}

model ServicePackage {
  id              String          @id @default(uuid())
  name            String
  description     String
  
  // Package details
  services        String[]        @default([]) // Service IDs included
  price           Float
  currency        String          @default("EUR")
  duration        String?         // "3 months", "1 year", etc.
  
  // Features
  features        String[]        @default([])
  limitations     String[]        @default([])
  
  // Status
  active          Boolean         @default(true)
  popular         Boolean         @default(false)
  
  // Metadata
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  @@map("service_packages")
}

// Service Categories
enum ServiceCategory {
  WEB_DEVELOPMENT
  SECURITY_CONSULTING
  PENETRATION_TESTING
  CODE_AUDIT
  TRAINING
  TECHNICAL_WRITING
  ARCHITECTURE_REVIEW
  DEVOPS_CONSULTING
  API_DEVELOPMENT
  DATABASE_DESIGN
  PERFORMANCE_OPTIMIZATION
  COMPLIANCE_AUDIT
}

// Service Types
enum ServiceType {
  CONSULTING      // Advisory services
  DEVELOPMENT     // Custom development
  AUDIT          // Security/code audits
  TRAINING       // Educational services
  SUPPORT        // Ongoing support
  PACKAGE        // Bundled services
}

// Service Pricing Models
enum ServicePricing {
  HOURLY         // Hourly rate
  DAILY          // Daily rate
  PROJECT        // Fixed project price
  MONTHLY        // Monthly retainer
  CUSTOM         // Custom pricing
  FREE           // Free service
}

// Service Status
enum ServiceStatus {
  DRAFT          // Not published
  ACTIVE         // Available for booking
  PAUSED         // Temporarily unavailable
  ARCHIVED       // No longer offered
}

// Inquiry Status
enum InquiryStatus {
  NEW            // Just received
  REVIEWED       // Under review
  RESPONDED      // Response sent
  IN_DISCUSSION  // Active conversation
  QUOTED         // Quote provided
  ACCEPTED       // Client accepted
  REJECTED       // Client declined
  COMPLETED      // Project finished
  CANCELLED      // Cancelled
}

// Inquiry Priority
enum InquiryPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Inquiry Source
enum InquirySource {
  WEBSITE        // Contact form on website
  EMAIL          // Direct email
  PHONE          // Phone call
  REFERRAL       // Word of mouth
  SOCIAL_MEDIA   // Social media
  LINKEDIN       // LinkedIn message
  OTHER          // Other sources
}

// ================================
// VISITOR ANALYTICS
// ================================

model VisitorSession {
  id           String   @id @default(uuid())
  fingerprint  String   // Hash anonimo per identificare sessioni uniche
  
  // Timing
  firstSeen    DateTime @default(now())
  lastSeen     DateTime @default(now())
  
  // Attivit√†
  pageViews    Int      @default(1)
  currentPage  String?
  referrer     String?
  
  // Informazioni tecniche (anonime)
  isMobile     Boolean  @default(false)
  country      String?  // Opzionale per statistiche geografiche
  
  // Indici per performance
  @@index([fingerprint])
  @@index([lastSeen])
  @@index([firstSeen])
  @@map("visitor_sessions")
}
